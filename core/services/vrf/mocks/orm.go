// Code generated by mockery v2.7.5. DO NOT EDIT.

package mocks

import (
	vrf "github.com/smartcontractkit/chainlink/core/services/vrf"
	mock "github.com/stretchr/testify/mock"
)

// ORM is an autogenerated mock type for the ORM type
type ORM struct {
	mock.Mock
}

// ArchiveEncryptedSecretVRFKey provides a mock function with given fields: k
func (_m *ORM) ArchiveEncryptedSecretVRFKey(k *vrf.EncryptedVRFKey) error {
	ret := _m.Called(k)

	var r0 error
	if rf, ok := ret.Get(0).(func(*vrf.EncryptedVRFKey) error); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteEncryptedSecretVRFKey provides a mock function with given fields: k
func (_m *ORM) DeleteEncryptedSecretVRFKey(k *vrf.EncryptedVRFKey) error {
	ret := _m.Called(k)

	var r0 error
	if rf, ok := ret.Get(0).(func(*vrf.EncryptedVRFKey) error); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindEncryptedSecretVRFKeys provides a mock function with given fields: where
func (_m *ORM) FindEncryptedSecretVRFKeys(where ...vrf.EncryptedVRFKey) ([]*vrf.EncryptedVRFKey, error) {
	_va := make([]interface{}, len(where))
	for _i := range where {
		_va[_i] = where[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 []*vrf.EncryptedVRFKey
	if rf, ok := ret.Get(0).(func(...vrf.EncryptedVRFKey) []*vrf.EncryptedVRFKey); ok {
		r0 = rf(where...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*vrf.EncryptedVRFKey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(...vrf.EncryptedVRFKey) error); ok {
		r1 = rf(where...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FirstOrCreateEncryptedSecretVRFKey provides a mock function with given fields: k
func (_m *ORM) FirstOrCreateEncryptedSecretVRFKey(k *vrf.EncryptedVRFKey) error {
	ret := _m.Called(k)

	var r0 error
	if rf, ok := ret.Get(0).(func(*vrf.EncryptedVRFKey) error); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
